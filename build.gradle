plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Code coverage plugin
    id 'jacoco'
    // Code quality plugin
    id 'pmd'
    // Versioning plugin
    id 'pl.allegro.tech.build.axion-release' version '1.14.2'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Dependencies used for compilation and runtime
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.slf4j:slf4j-api:2.0.3'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'commons-cli:commons-cli:1.5.0'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // Dependencies only used at runtime, not for compilation
    runtimeOnly 'ch.qos.logback:logback-core:1.4.5'
    runtimeOnly 'ch.qos.logback:logback-classic:1.4.4'
}

project.version = scmVersion.version
def projectMainClass = 'com.orimwulong.gamefinder.GameFinder'

jar {
    manifest {
        attributes("Created-By": JavaVersion.current(),
                    "Main-Class": projectMainClass,
                    "Implementation-Title": "GameFinder",
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "orimwulong")
    }
}

application {
    // Define the main class for the application.
    mainClass = projectMainClass
    // Enable loading of logback configuraiton file at runtime
    applicationDefaultJvmArgs = ['-Dlogback.configurationFile=logback.xml']
}

distributions {
    main {
        contents {
            from 'README.md'
            from 'LICENSE'
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jacoco {
    // Force toolVersion to utilise version working with Java 18
    toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // Enforce minimum code coverage
                minimum = 0.0
            }
        }
    }
}

pmd {
    toolVersion = "6.46.0"
    // From Medium priority warning only (values 1 to 5, 1 is highest).
    rulesMinimumPriority = 3
    // Clear default ruleSets of gradle plugin
    ruleSets = []
    // Use custom ruleset to enable exclusion of rules
    ruleSetConfig = resources.text.fromFile("config/pmd/ruleset.xml")
}

// Enforce that distributions are only made if tests are successful
distZip.dependsOn test
distTar.dependsOn test
// Chaining code coverage and code quality to ensure distributions are not created if one stage fail
// Enforce that tests include code coverage verification
test.finalizedBy jacocoTestCoverageVerification
// Enforce that code coverage reports are created
jacocoTestCoverageVerification.finalizedBy jacocoTestReport
// Enforece the code quality is run as part of test
jacocoTestReport.finalizedBy pmdMain
